{"version":3,"file":"static/js/888.4c95b8bf.chunk.js","mappings":"wKAuHA,QAjHA,SAAyBA,GAAyB,IAAxB,WAAEC,GAAa,GAAMD,EAE7C,MAAME,EAAYC,OAAOC,QAAQC,EAAAA,IAAeC,KAAIC,IAAA,IAAEC,EAAKC,GAASF,EAAA,MAAM,IACrEE,EACHC,GAAIF,EACL,KAGMG,EAAWC,IAAgBC,EAAAA,EAAAA,UAASC,OAAOC,YAAc,MAEhEC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,KACnBL,EAAaE,OAAOC,YAAc,IAAI,EAGxC,OADAD,OAAOI,iBAAiB,SAAUD,GAC3B,IAAMH,OAAOK,oBAAoB,SAAUF,EAAa,GAC9D,IAGH,MAeMG,EAAsBX,GAEnBE,GAAaF,EAASY,aACzBZ,EAASY,aACTZ,EAASa,OAASb,EAASc,UAGjC,OACEC,EAAAA,EAAAA,MAAA,WAASC,UAAU,oBAAmBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBACfE,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SAAC,mBACvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAEjBE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAC5BxB,EAAUI,KAAI,CAACG,EAAUmB,KACxBD,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAEHC,GAAI,cAAcrB,EAASC,KAC3Be,UAAU,qBAAoBC,UAE9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAW,kBAAiBG,EAAQ,IAAM,EAAI,UAAY,IAAKF,SAAA,EAClEC,EAAAA,EAAAA,KAAA,OACEF,UAAU,iBACVM,MAAO,CAAEC,gBAAiB,OAAOZ,EAAmBX,UAEtDe,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAEjB,EAASwB,QACxCN,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mBAAkBC,SAC5BjB,EAASyB,SACRV,EAAAA,EAAAA,MAAA,QACEW,QAAUC,GA9CdC,EAACH,EAASE,KACxBA,EAAEE,kBACFxB,OAAOyB,KACL,mDAAmDL,EAAQM,QAAQ,KAAM,OACzE,SACD,EAyCiCH,CAAQ5B,EAASyB,QAASE,GAC1CX,UAAU,WACVM,MAAO,CAAEU,OAAQ,WAAYf,SAAA,EAE7BC,EAAAA,EAAAA,KAAA,OACEe,IAAI,iDACJC,IAAI,WACJlB,UAAU,WACVmB,OAAO,KACPC,MAAM,OAEPpC,EAASyB,WAGZ,wBAGHzB,EAASqC,QACRtB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YACRC,EAAAA,EAAAA,KAAA,QACEQ,QAAUC,GA1DZW,EAACD,EAAOV,KACxBA,EAAEE,kBACFxB,OAAOL,SAASuC,KAAO,OAAOF,EAAMN,QAAQ,UAAW,KAAK,EAwD1BO,CAAUtC,EAASqC,MAAOV,GAC1CX,UAAU,aACVM,MAAO,CAAEU,OAAQ,UAAWQ,WAAY,OAAQvB,SAE/CjB,EAASqC,kBAvCfrC,EAASC,QAgDnBT,IACC0B,EAAAA,EAAAA,KAAA,OACEF,UAAU,mBACVM,MAAO,CAAEmB,UAAW,SAAUC,UAAW,QAASzB,UAElDC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAG,aAAaL,UAAU,0BAAyBC,SAAC,2BAOpE,C","sources":["sections/LocationsSection.js"],"sourcesContent":["// src/sections/LocationsSection.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { locationsData } from \"../data\";\r\nimport \"./LocationsSection.css\";\r\n\r\nfunction LocationsSection({ showButton = true }) {\r\n  // Convert locationsData (an object) to an array of locations with keys.\r\n  const locations = Object.entries(locationsData).map(([key, location]) => ({\r\n    ...location,\r\n    id: key,\r\n  }));\r\n\r\n  // Determine if the screen width is 769 or greater.\r\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth >= 769);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsDesktop(window.innerWidth >= 769);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  // Handler to open the address in Google Maps\r\n  const openMap = (address, e) => {\r\n    e.stopPropagation();\r\n    window.open(\r\n      `https://www.google.com/maps/search/?api=1&query=${address.replace(/ /g, \"+\")}`,\r\n      \"_blank\"\r\n    );\r\n  };\r\n\r\n  // Handler for calling the phone number\r\n  const callPhone = (phone, e) => {\r\n    e.stopPropagation();\r\n    window.location.href = `tel:${phone.replace(/[^0-9]/g, \"\")}`;\r\n  };\r\n\r\n  // Helper to determine the background image based on screen width and available data.\r\n  const getBackgroundImage = (location) => {\r\n    // Use desktopImage if available and on desktop; otherwise, fall back to heroImage (or image)\r\n    return isDesktop && location.desktopImage\r\n      ? location.desktopImage\r\n      : location.image || location.heroImage;\r\n  };\r\n\r\n  return (\r\n    <section className=\"locations-section\">\r\n      <div className=\"hero-content-title-locations\">\r\n        <div className=\"line-locations\"></div>\r\n        <h1 className=\"company-name-locations\">OUR LOCATIONS</h1>\r\n        <div className=\"line-locations\"></div>\r\n      </div>\r\n      <div className=\"locations-grid\">\r\n        {locations.map((location, index) => (\r\n          <Link\r\n            key={location.id}\r\n            to={`/locations/${location.id}`}\r\n            className=\"location-card-link\"\r\n          >\r\n            <div className={`location-card ${index % 2 !== 0 ? \"reverse\" : \"\"}`}>\r\n              <div\r\n                className=\"location-image\"\r\n                style={{ backgroundImage: `url(${getBackgroundImage(location)})` }}\r\n              ></div>\r\n              <div className=\"location-info\">\r\n                <h2 className=\"location-city\">{location.name}</h2>\r\n                <p className=\"location-address\">\r\n                  {location.address ? (\r\n                    <span\r\n                      onClick={(e) => openMap(location.address, e)}\r\n                      className=\"map-link\"\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      <img\r\n                        src=\"https://i.postimg.cc/HLxtkzZm/map-pin-1-1.webp\"\r\n                        alt=\"Map icon\"\r\n                        className=\"map-icon\"\r\n                        height=\"16\"\r\n                        width=\"16\"\r\n                      />\r\n                      {location.address}\r\n                    </span>\r\n                  ) : (\r\n                    \"Address coming soon\"\r\n                  )}\r\n                </p>\r\n                {location.phone && (\r\n                  <p className=\"location-address\">\r\n                    <strong>Phone:</strong>\r\n                    <span\r\n                      onClick={(e) => callPhone(location.phone, e)}\r\n                      className=\"phone-link\"\r\n                      style={{ cursor: \"pointer\", marginLeft: \"5px\" }}\r\n                    >\r\n                      {location.phone}\r\n                    </span>\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n      {showButton && (\r\n        <div\r\n          className=\"button-container\"\r\n          style={{ textAlign: \"center\", marginTop: \"20px\" }}\r\n        >\r\n          <Link to=\"/locations\" className=\"location-section-button\">\r\n            View All Locations\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default LocationsSection;\r\n"],"names":["_ref","showButton","locations","Object","entries","locationsData","map","_ref2","key","location","id","isDesktop","setIsDesktop","useState","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","getBackgroundImage","desktopImage","image","heroImage","_jsxs","className","children","_jsx","index","Link","to","style","backgroundImage","name","address","onClick","e","openMap","stopPropagation","open","replace","cursor","src","alt","height","width","phone","callPhone","href","marginLeft","textAlign","marginTop"],"sourceRoot":""}