{"version":3,"file":"static/js/305.31ecc22f.chunk.js","mappings":"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","sources":["pages/BookAppointmentStep6.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./BookAppointmentPage.css\";\r\n\r\nconst BookAppointmentStep6 = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [flashMessage, setFlashMessage] = useState(\"\");\r\n  const demoMode = false;\r\n  const patientSigPad = useRef(null);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      patientName: \"\",\r\n      patientSignature: \"\",\r\n      dob: \"\",\r\n    },\r\n  });\r\n\r\n  const values = watch();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (demoMode) {\r\n      setValue(\"patientName\", \"John Doe\");\r\n      setValue(\"dob\", \"1980-01-01\");\r\n    }\r\n  }, [demoMode, setValue]);\r\n\r\n  useEffect(() => {\r\n    trigger();\r\n  }, [trigger]);\r\n\r\n  useEffect(() => {\r\n    const storedData = localStorage.getItem(\"appointmentFormData\");\r\n    if (storedData) {\r\n      console.log(\"Loaded stored form data:\", JSON.parse(storedData));\r\n    }\r\n  }, []);\r\n\r\n  const applySignatureCanvasStyles = (ref) => {\r\n    if (ref && ref.getCanvas()) {\r\n      const canvas = ref.getCanvas();\r\n      Object.assign(canvas.style, {\r\n        border: \"none\",\r\n        borderRadius: \"12px\",\r\n        backgroundColor: \"#ffffff\",\r\n        backgroundImage:\r\n          \"repeating-linear-gradient(45deg, #f3f4f6, #f3f4f6 10px, #ffffff 10px, #ffffff 20px)\",\r\n        width: \"min-content\",\r\n        maxWidth: \"100%\",\r\n        height: \"150px\",\r\n        display: \"block\",\r\n        boxSizing: \"border-box\",\r\n        transition: \"box-shadow 0.3s ease, transform 0.2s ease\",\r\n      });\r\n\r\n      const activateHover = () => {\r\n        canvas.style.boxShadow = \"0 8px 24px rgba(37, 99, 235, 0.35)\";\r\n        canvas.style.transform = \"scale(1.01)\";\r\n      };\r\n\r\n      const deactivateHover = () => {\r\n        canvas.style.boxShadow = \"0 6px 20px rgba(37, 99, 235, 0.2)\";\r\n        canvas.style.transform = \"scale(1)\";\r\n      };\r\n\r\n      canvas.addEventListener(\"mouseenter\", activateHover);\r\n      canvas.addEventListener(\"mouseleave\", deactivateHover);\r\n      canvas.addEventListener(\"touchstart\", activateHover);\r\n      canvas.addEventListener(\"touchend\", deactivateHover);\r\n    }\r\n  };\r\n\r\n  const clearPatientSignature = () => {\r\n    if (patientSigPad.current) {\r\n      patientSigPad.current.clear();\r\n      setValue(\"patientSignature\", \"\");\r\n      trigger(\"patientSignature\");\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (step6Data) => {\r\n    if (!patientSigPad.current || patientSigPad.current.isEmpty()) {\r\n      setValue(\"patientSignature\", \"\", { shouldValidate: true });\r\n      trigger(\"patientSignature\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    const signatureData = patientSigPad.current.getTrimmedCanvas().toDataURL();\r\n    step6Data.patientSignature = signatureData;\r\n\r\n    const labeledStep6Data = {\r\n      controlledSubstanceAutoRefillConsentPatientName: step6Data.patientName,\r\n      controlledSubstanceAutoRefillConsentPatientSignature: step6Data.patientSignature,\r\n      controlledSubstanceAutoRefillConsentDob: step6Data.dob,\r\n    };\r\n\r\n    const previousSteps = JSON.parse(localStorage.getItem(\"appointmentFormData\")) || {};\r\n    const fullData = { ...previousSteps, ...labeledStep6Data };\r\n\r\n    try {\r\n      const response = await fetch(\"/appointment\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ appointment: fullData }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(\"✅ Submitted:\", result);\r\n        localStorage.removeItem(\"appointmentFormData\");\r\n        setFlashMessage(\"✅ Appointment submitted successfully!\");\r\n        setTimeout(() => navigate(\"/\"), 2000);\r\n      } else {\r\n        console.error(\"❌ Server error:\", result);\r\n        setFlashMessage(\"❌ Error submitting appointment. Please try again.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"❌ Network error:\", err);\r\n      setFlashMessage(\"❌ Network error. Please try again.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {flashMessage && <div className=\"flash-message\">{flashMessage}</div>}\r\n      {isLoading && <div className=\"loading-spinner\">Submitting<span className=\"dots\"></span></div>}\r\n      <form className=\"intake-form\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"book-appointment-container\">\r\n          <div className=\"banner\">\r\n            <div className=\"banner-overlay\"></div>\r\n            <div className=\"banner-text\">\r\n              <h1>Book Telemedicine Consultation</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"content-section\">\r\n            <h2>Start Your Wellness Journey Today</h2>\r\n            <div className=\"paper-container\">\r\n              <div className=\"progress\">\r\n                <div className=\"progress-info\"><p>Step 6 of 6</p></div>\r\n                <div className=\"progress-bar-background\">\r\n                  <div className=\"progress-bar-fill\" style={{ width: \"100%\" }} />\r\n                </div>\r\n              </div>\r\n\r\n\r\n            <div className=\"consent-text\">\r\n              <p>\r\n                I understand that Pure Health &amp; Wellness has enrolled my controlled\r\n                substance medication in Tailor Made Compounding’s auto-refill program.\r\n              </p>\r\n              <p>\r\n                <strong>Liability and Responsibility:</strong>\r\n              </p>\r\n              <p>\r\n                I understand that TMC will not call and/or email to notify me or Pure Health\r\n                &amp; Wellness that my medication is being refilled.\r\n              </p>\r\n              <p>\r\n                I understand that this form is a legal replacement in regards to receiving a\r\n                call to notify me that my prescription is due to be filled and will be shipped\r\n                to me without confirmation.\r\n              </p>\r\n              <p>\r\n                I understand that it is my responsibility to immediately report any change in\r\n                regards to my shipping address.\r\n              </p>\r\n              <p>\r\n                I understand that I will be held responsible for notifying Tailor Made Compounding\r\n                in the event my controlled substance package(s) are lost/stolen. I will inquire\r\n                about the next steps for contacting UPS and filing a police report, and I fully\r\n                understand if I do not take these next steps that I may not be eligible for any\r\n                medication replacements.\r\n              </p>\r\n              <p>\r\n                I understand that I will be held responsible for any added expenses of lost or\r\n                stolen packages.\r\n              </p>\r\n              <p>\r\n                I understand that I will be responsible for notifying TMC if I have a pause and/or\r\n                discontinuation of medication.\r\n              </p>\r\n              <p>\r\n                I understand that it is my responsibility, or that of Pure Health &amp; Wellness,\r\n                to notify TMC if my dosing or quantity prescribed has changed and any previous\r\n                prescription’s refills will need to be canceled.\r\n              </p>\r\n              <p>\r\n                I understand that if I do not notify TMC before a prescription has left their\r\n                facility, I will still be held responsible for the payment of this prescription.\r\n              </p>\r\n              <p>\r\n                In accordance with state law KRS 218A.180 a controlled substance included in\r\n                Schedules III, IV, and V \"shall not be filled or refilled more than six (6) months\r\n                after the date issued or be refilled more than five (5) times, unless renewed by the\r\n                practitioner and a new prescription, written, electronic, or oral shall be\r\n                required\". Therefore, any prescriptions exceeding 6 months from date written, will\r\n                require a new order to be sent in or verbal renewal by prescriber regardless of\r\n                refills remaining.\r\n              </p>\r\n            </div>\r\n\r\n\r\n              <div className=\"form-group\">\r\n                <label>Patient's Name (Required)</label>\r\n                <input\r\n                  type=\"text\"\r\n                  maxLength=\"50\"\r\n                  {...register(\"patientName\", { required: \"Patient's Name is required\" })}\r\n                />\r\n                <span className=\"character-counter\">{values.patientName?.length || 0} of 50 max characters</span>\r\n                {errors.patientName && <p className=\"error-message\">{errors.patientName.message}</p>}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Patient Signature (Required)</label>\r\n                <div className=\"signature-frame\">\r\n                  <SignatureCanvas\r\n                    ref={(ref) => {\r\n                      patientSigPad.current = ref;\r\n                      applySignatureCanvasStyles(ref);\r\n                    }}\r\n                    penColor=\"black\"\r\n                    canvasProps={{\r\n                      width: 400,\r\n                      height: 150,\r\n                    }}\r\n                    onEnd={() => {\r\n                      if (!patientSigPad.current.isEmpty()) {\r\n                        const dataUrl = patientSigPad.current.getTrimmedCanvas().toDataURL();\r\n                        setValue(\"patientSignature\", dataUrl);\r\n                        trigger(\"patientSignature\");\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n                <button type=\"button\" onClick={clearPatientSignature} className=\"clear-signature\">\r\n                  Clear Signature\r\n                </button>\r\n                {errors.patientSignature && (\r\n                  <p className=\"error-message\">{errors.patientSignature.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Date of Birth (Required)</label>\r\n                <input\r\n                  type=\"date\"\r\n                  {...register(\"dob\", { required: \"Date of Birth is required\" })}\r\n                />\r\n                {errors.dob && <p className=\"error-message\">{errors.dob.message}</p>}\r\n              </div>\r\n\r\n              <div className=\"form-navigation button-row\">\r\n                <button type=\"button\" className=\"btn-outline\" onClick={() => navigate(\"/book-appointment-step5\")}>\r\n                  Previous\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-btn\">\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BookAppointmentStep6;\r\n"],"names":["BookAppointmentStep6","_values$patientName","navigate","useNavigate","isLoading","setIsLoading","useState","flashMessage","setFlashMessage","demoMode","patientSigPad","useRef","register","handleSubmit","setValue","watch","trigger","formState","errors","useForm","mode","defaultValues","patientName","patientSignature","dob","values","useEffect","window","scrollTo","storedData","localStorage","getItem","console","log","JSON","parse","_jsxs","_Fragment","children","_jsx","className","onSubmit","async","current","isEmpty","shouldValidate","signatureData","getTrimmedCanvas","toDataURL","step6Data","labeledStep6Data","controlledSubstanceAutoRefillConsentPatientName","controlledSubstanceAutoRefillConsentPatientSignature","controlledSubstanceAutoRefillConsentDob","previousSteps","fullData","_objectSpread","response","fetch","method","headers","body","stringify","appointment","result","json","ok","removeItem","setTimeout","error","err","style","width","type","maxLength","required","length","message","SignatureCanvas","ref","getCanvas","canvas","Object","assign","border","borderRadius","backgroundColor","backgroundImage","maxWidth","height","display","boxSizing","transition","activateHover","boxShadow","transform","deactivateHover","addEventListener","applySignatureCanvasStyles","penColor","canvasProps","onEnd","dataUrl","onClick","clearPatientSignature","clear"],"sourceRoot":""}