{"version":3,"file":"static/js/305.d499b5d9.chunk.js","mappings":"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","sources":["pages/BookAppointmentStep6.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./BookAppointmentPage.css\";\r\n\r\nconst BookAppointmentStep6 = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Demo mode flag – when true, default data will be auto-filled.\r\n  const demoMode = true;\r\n\r\n  // Ref for the patient signature pad\r\n  const patientSigPad = useRef(null);\r\n\r\n  // Preferred default value for DOB can be set here; otherwise, it remains empty.\r\n  const defaultDOB = \"\";\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      patientName: \"\",\r\n      patientSignature: \"\",\r\n      dob: defaultDOB,\r\n    },\r\n  });\r\n\r\n  const values = watch();\r\n\r\n  // Auto scroll to the top when this component mounts.\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  // In demo mode, auto-fill non-signature data.\r\n  useEffect(() => {\r\n    if (demoMode) {\r\n      setValue(\"patientName\", \"John Doe\");\r\n      setValue(\"dob\", \"1980-01-01\");\r\n      console.log(\"Demo mode enabled: Default data auto-filled\");\r\n    }\r\n  }, [demoMode, setValue]);\r\n\r\n  // Trigger initial validation on mount.\r\n  useEffect(() => {\r\n    console.log(\"Step 6: Triggering initial validation\");\r\n    trigger();\r\n  }, [trigger]);\r\n\r\n  // Log the saved appointment data from previous steps and this step's form values when the component mounts.\r\n  useEffect(() => {\r\n    const storedData = localStorage.getItem(\"appointmentFormData\");\r\n    if (storedData) {\r\n      console.log(\"Step 6: Stored appointment data from previous steps:\", JSON.parse(storedData));\r\n    } else {\r\n      console.log(\"Step 6: No stored appointment data found.\");\r\n    }\r\n    console.log(\"Step 6: Current form values on mount:\", values);\r\n  }, []); // once on mount\r\n\r\n  // Optional: Log current Step 6 form values whenever they change.\r\n  useEffect(() => {\r\n    console.log(\"Step 6: Current form values updated:\", values);\r\n  }, [values]);\r\n\r\n  // Function to clear the patient signature.\r\n  const clearPatientSignature = () => {\r\n    if (patientSigPad.current) {\r\n      patientSigPad.current.clear();\r\n      setValue(\"patientSignature\", \"\");\r\n      trigger(\"patientSignature\");\r\n    }\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    // Ensure that the patient signature pad is not empty.\r\n    if (!patientSigPad.current || patientSigPad.current.isEmpty()) {\r\n      setValue(\"patientSignature\", \"\", { shouldValidate: true });\r\n      trigger(\"patientSignature\");\r\n      return;\r\n    }\r\n    // Capture the trimmed signature image and update the form state.\r\n    const patientSigData = patientSigPad.current.getTrimmedCanvas().toDataURL();\r\n    setValue(\"patientSignature\", patientSigData);\r\n\r\n    // Final submission: navigate to a confirmation or finalization page.\r\n    navigate(\"/book-appointment-complete\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"intake-form\" onSubmit={handleSubmit(onSubmit)}>\r\n      <div className=\"book-appointment-container\">\r\n        {/* Banner */}\r\n        <div className=\"banner\">\r\n          <div className=\"banner-overlay\"></div>\r\n          <div className=\"banner-text\">\r\n            <h1>Book Telemedicine Consultation</h1>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"content-section\">\r\n          <h2>Start Your Wellness Journey Today</h2>\r\n          <div className=\"paper-container\">\r\n            {/* Progress Bar */}\r\n            <div className=\"progress\">\r\n              <div className=\"progress-info\">\r\n                <p>Step 6 of 6</p>\r\n              </div>\r\n              <div className=\"progress-bar-background\">\r\n                <div className=\"progress-bar-fill\" style={{ width: \"100%\" }} />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Consent Text */}\r\n            <div className=\"consent-text\">\r\n              <p>\r\n                I understand that Pure Health &amp; Wellness has enrolled my controlled\r\n                substance medication in Tailor Made Compounding’s auto-refill program.\r\n              </p>\r\n              <p>\r\n                <strong>Liability and Responsibility:</strong>\r\n              </p>\r\n              <p>\r\n                I understand that TMC will not call and/or email to notify me or Pure Health\r\n                &amp; Wellness that my medication is being refilled.\r\n              </p>\r\n              <p>\r\n                I understand that this form is a legal replacement in regards to receiving a\r\n                call to notify me that my prescription is due to be filled and will be shipped\r\n                to me without confirmation.\r\n              </p>\r\n              <p>\r\n                I understand that it is my responsibility to immediately report any change in\r\n                regards to my shipping address.\r\n              </p>\r\n              <p>\r\n                I understand that I will be held responsible for notifying Tailor Made Compounding\r\n                in the event my controlled substance package(s) are lost/stolen. I will inquire\r\n                about the next steps for contacting UPS and filing a police report, and I fully\r\n                understand if I do not take these next steps that I may not be eligible for any\r\n                medication replacements.\r\n              </p>\r\n              <p>\r\n                I understand that I will be held responsible for any added expenses of lost or\r\n                stolen packages.\r\n              </p>\r\n              <p>\r\n                I understand that I will be responsible for notifying TMC if I have a pause and/or\r\n                discontinuation of medication.\r\n              </p>\r\n              <p>\r\n                I understand that it is my responsibility, or that of Pure Health &amp; Wellness,\r\n                to notify TMC if my dosing or quantity prescribed has changed and any previous\r\n                prescription’s refills will need to be canceled.\r\n              </p>\r\n              <p>\r\n                I understand that if I do not notify TMC before a prescription has left their\r\n                facility, I will still be held responsible for the payment of this prescription.\r\n              </p>\r\n              <p>\r\n                In accordance with state law KRS 218A.180 a controlled substance included in\r\n                Schedules III, IV, and V \"shall not be filled or refilled more than six (6) months\r\n                after the date issued or be refilled more than five (5) times, unless renewed by the\r\n                practitioner and a new prescription, written, electronic, or oral shall be\r\n                required\". Therefore, any prescriptions exceeding 6 months from date written, will\r\n                require a new order to be sent in or verbal renewal by prescriber regardless of\r\n                refills remaining.\r\n              </p>\r\n            </div>\r\n\r\n            {/* Patient's Information */}\r\n            <div className=\"form-group\">\r\n              <label>Patient's Name (Required)</label>\r\n              <input\r\n                type=\"text\"\r\n                maxLength=\"50\"\r\n                {...register(\"patientName\", {\r\n                  required: \"Patient's Name is required\",\r\n                })}\r\n              />\r\n              <span className=\"character-counter\">\r\n                {values.patientName ? values.patientName.length : 0} of 50 max characters\r\n              </span>\r\n              {errors.patientName && (\r\n                <p className=\"error-message\">{errors.patientName.message}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Patient Signature (Required)</label>\r\n              <div className=\"signature-pad-wrapper\">\r\n                <SignatureCanvas\r\n                  ref={patientSigPad}\r\n                  penColor=\"black\"\r\n                  canvasProps={{\r\n                    width: 400,\r\n                    height: 150,\r\n                    className: \"signature-canvas-fixed\",\r\n                  }}\r\n                  onEnd={() => {\r\n                    if (!patientSigPad.current.isEmpty()) {\r\n                      const dataUrl = patientSigPad.current\r\n                        .getTrimmedCanvas()\r\n                        .toDataURL();\r\n                      setValue(\"patientSignature\", dataUrl);\r\n                      trigger(\"patientSignature\");\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <button\r\n                type=\"button\"\r\n                onClick={clearPatientSignature}\r\n                className=\"clear-signature\"\r\n              >\r\n                Clear Signature\r\n              </button>\r\n              {errors.patientSignature && (\r\n                <p className=\"error-message\">\r\n                  {errors.patientSignature.message}\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date of Birth (Required)</label>\r\n              <input\r\n                type=\"date\"\r\n                {...register(\"dob\", { required: \"Date of Birth is required\" })}\r\n              />\r\n              {errors.dob && (\r\n                <p className=\"error-message\">{errors.dob.message}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Navigation Buttons */}\r\n            <div className=\"form-navigation button-row\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-outline\"\r\n                onClick={() => navigate(\"/book-appointment-step5\")}\r\n              >\r\n                Previous\r\n              </button>\r\n              <button type=\"submit\" className=\"submit-btn\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BookAppointmentStep6;\r\n"],"names":["BookAppointmentStep6","navigate","useNavigate","demoMode","patientSigPad","useRef","register","handleSubmit","setValue","watch","trigger","formState","errors","useForm","mode","defaultValues","patientName","patientSignature","dob","values","useEffect","window","scrollTo","console","log","storedData","localStorage","getItem","JSON","parse","_jsx","className","onSubmit","current","isEmpty","shouldValidate","patientSigData","getTrimmedCanvas","toDataURL","children","_jsxs","style","width","type","maxLength","required","length","message","SignatureCanvas","ref","penColor","canvasProps","height","onEnd","dataUrl","onClick","clearPatientSignature","clear"],"sourceRoot":""}