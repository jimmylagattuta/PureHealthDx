{"version":3,"file":"static/js/230.2bc7df9b.chunk.js","mappings":"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","sources":["pages/BookAppointmentStep3.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./BookAppointmentPage.css\";\r\n\r\nconst BookAppointmentStep3 = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Mobile-first defaults for demonstration\r\n  const demoMode = true;\r\n\r\n  // Refs for signature canvas\r\n  const sigPad = useRef(null);\r\n\r\n  // Default data based on your screenshot\r\n  // Name: \"fdfd\" (4 of 50 chars)\r\n  // DOB: 9/15/2015\r\n  // Date: \"2025-04-11\"\r\n  const defaultName = demoMode ? \"fdfd\" : \"\";\r\n  const defaultDOB = {\r\n    month: demoMode ? \"9\" : \"\",\r\n    day: demoMode ? \"15\" : \"\",\r\n    year: demoMode ? \"2015\" : \"\",\r\n  };\r\n  const defaultDate = demoMode ? \"2025-04-11\" : \"\";\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      patientName: defaultName,\r\n      dobMonth: defaultDOB.month,\r\n      dobDay: defaultDOB.day,\r\n      dobYear: defaultDOB.year,\r\n      date: defaultDate,\r\n      signature: \"\",\r\n    },\r\n  });\r\n\r\n  const values = watch();\r\n\r\n  // Auto-scroll to top on mount\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  // Trigger initial validation\r\n  useEffect(() => {\r\n    console.log(\"Step 3: Triggering initial validation\");\r\n    trigger();\r\n  }, [trigger]);\r\n\r\n  // If demo mode is true, auto-fill the fields\r\n  useEffect(() => {\r\n    if (demoMode) {\r\n      setValue(\"patientName\", \"fdfd\"); // The name from screenshot\r\n      setValue(\"dobMonth\", \"9\");\r\n      setValue(\"dobDay\", \"15\");\r\n      setValue(\"dobYear\", \"2015\");\r\n      setValue(\"date\", \"2025-04-11\");\r\n      console.log(\"Demo mode: fields auto-filled\");\r\n    }\r\n  }, [demoMode, setValue]);\r\n\r\n  const clearSignature = () => {\r\n    if (sigPad.current) {\r\n      sigPad.current.clear();\r\n      setValue(\"signature\", \"\");\r\n      trigger(\"signature\");\r\n    }\r\n  };\r\n\r\nconst onSubmit = (step3Data) => {\r\n  if (!sigPad.current || sigPad.current.isEmpty()) {\r\n    setValue(\"signature\", \"\", { shouldValidate: true });\r\n    trigger(\"signature\");\r\n    return;\r\n  }\r\n\r\n  const signatureImage = sigPad.current.getTrimmedCanvas().toDataURL();\r\n  step3Data.signature = signatureImage;\r\n\r\n  const labeledStep3Data = {\r\n    patientConsentForMedicalServicesPatientName: step3Data.patientName,\r\n    patientConsentForMedicalServicesDobMonth: step3Data.dobMonth,\r\n    patientConsentForMedicalServicesDobDay: step3Data.dobDay,\r\n    patientConsentForMedicalServicesDobYear: step3Data.dobYear,\r\n    patientConsentForMedicalServicesDate: step3Data.date,\r\n    patientConsentForMedicalServicesSignature: step3Data.signature\r\n  };\r\n\r\n  const step1And2Data = JSON.parse(localStorage.getItem(\"appointmentFormData\")) || {};\r\n  const fullData = { ...step1And2Data, ...labeledStep3Data };\r\n\r\n  console.log(\"📋 Combined Step 1 + 2 + 3 data:\", fullData);\r\n\r\n  localStorage.setItem(\"appointmentFormData\", JSON.stringify(fullData));\r\n\r\n  navigate(\"/book-appointment-step4\");\r\n};\r\n\r\n\r\n  // Helper function for required field styling\r\n  const getRequiredClass = (fieldValue, fieldError) => {\r\n    if (!fieldValue) return \"required error\";\r\n    return fieldError ? \"required error\" : \"required valid\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"robots\" content=\"noindex, nofollow\" />\r\n        <title>Step 3 of 6 | Become a Patient</title>\r\n      </Helmet>\r\n        <div className=\"book-appointment-container\">      <div className=\"banner\">\r\n        <div className=\"banner-overlay\"></div>\r\n        <div className=\"banner-text\">\r\n          <h1>Book Telemedicine Consultation</h1>\r\n        </div>\r\n      </div>\r\n          <div className=\"content-section\">\r\n          <h2>Start Your Wellness Journey Today</h2>\r\n\r\n            <div className=\"paper-container\">\r\n              {/* Progress Bar */}\r\n              <div className=\"progress\">\r\n                <div className=\"progress-info\">\r\n                  <p>Step 3 of 6</p>\r\n                </div>\r\n                <div className=\"progress-bar-background\">\r\n                  <div className=\"progress-bar-fill\" style={{ width: \"50%\" }} />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Page Title */}\r\n              <h1 style={{ marginBottom: \"1rem\" }}>\r\n                Patient Consent for Medical Services\r\n              </h1>\r\n\r\n              {/* Consent Text */}\r\n              <div className=\"consent-text\">\r\n                <p>\r\n                  This Consent for Medical Services (“CONSENT”) specifies the terms\r\n                  and conditions under which, you, the undersigned patient\r\n                  (“PATIENT”) may secure the availability of medical services offered\r\n                  by (“PRACTICE”):\r\n                </p>\r\n                <p>\r\n                  Pure Health &amp; Wellness 1130 Coffee Rd, Modesto, CA 95355\r\n                </p>\r\n                <p>\r\n                  This consent applies to the PRACTICE, its agents, employees and\r\n                  physician(s). PATIENT and the PRACTICE hereby enter into this\r\n                  agreement for provision of medical services specified herein\r\n                  (SERVICES). Wherefore, in exchange for consideration, the receipt\r\n                  and sufficiency of which the parties hereby acknowledge the PATIENT\r\n                  and PRACTICE agree as follows:\r\n                </p>\r\n                <p>\r\n                  The PATIENT acknowledges and agrees that this agreement has been\r\n                  entered into before the PRACTICE has provided the SERVICES\r\n                  specified herein to the PATIENT.\r\n                </p>\r\n                <p>\r\n                  The PATIENT acknowledges and agrees that this agreement has not\r\n                  been entered into at a time when the PATIENT is facing an\r\n                  emergency or an urgent health care situation.\r\n                </p>\r\n                <p>\r\n                  The PATIENT acknowledges reading and receiving a copy of the Notice\r\n                  of Privacy Practices, and by signing this agreement, the PATIENT\r\n                  authorizes the PRACTICE and its representatives to use and share\r\n                  PATIENT health information as described in the Notices of Privacy\r\n                  Practices.\r\n                </p>\r\n                <p>\r\n                  The PATIENT agrees to let PRACTICE, its agents, employees, and\r\n                  physician(s) provide medical care services. The SERVICES provided\r\n                  to the PATIENT may include:\r\n                </p>\r\n                <ul>\r\n                  <li>Evaluation of patient medical history and lifestyle behaviors</li>\r\n                  <li>Physical examination</li>\r\n                  <li>Blood, urine, fecal, and/or saliva tests</li>\r\n                  <li>Diagnostic testing, bioelectrical and/or imaging tests</li>\r\n                  <li>\r\n                    Medical recommendations and management regarding my health issues\r\n                    and disease prevention\r\n                  </li>\r\n                  <li>Nutrition</li>\r\n                  <li>Nutritional supplementation and/or replacement</li>\r\n                  <li>\r\n                    Physical activity, functional performance, and exercise\r\n                  </li>\r\n                  <li>Lifestyle, environment, and behavior</li>\r\n                  <li>Stress response management</li>\r\n                  <li>Hormone replacement therapy</li>\r\n                  <li>\r\n                    Medication prescription management for those medications\r\n                    prescribed by the PRACTICE\r\n                  </li>\r\n                  <li>\r\n                    Procedures may include but are not limited to Injections,\r\n                    Intravenous infusion therapy, Aesthetic procedures\r\n                  </li>\r\n                </ul>\r\n                <p>\r\n                  PATIENT agrees that PRACTICE has not made any claims or statements\r\n                  about results or cures.\r\n                </p>\r\n                <p>\r\n                  Duration of Consent: PATIENT acknowledges the right to revoke this\r\n                  consent at any time except to the extent PRACTICE has already taken\r\n                  action in reliance on it. If PATIENT does not revoke it, this\r\n                  Consent will continue indefinitely. By signing this agreement, the\r\n                  PATIENT acknowledges that PATIENT has read and fully understands\r\n                  the information contained in this agreement. PATIENT agrees that\r\n                  everything in this Consent applies to current and future health\r\n                  care services provided by PRACTICE\r\n                </p>\r\n              </div>\r\n\r\n              {/* Intake Form */}\r\n              <form className=\"intake-form\" onSubmit={handleSubmit(onSubmit)}>\r\n                {/* Patient Name */}\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    Patient's Name <span className={getRequiredClass(values.patientName, errors.patientName)}>\r\n                      (Required)\r\n                    </span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    maxLength={50}\r\n                    {...register(\"patientName\", {\r\n                      required: \"Patient's Name is required.\",\r\n                    })}\r\n                  />\r\n                  <span className=\"character-counter\">\r\n                    {values.patientName ? values.patientName.length : 0} of 50 max characters\r\n                  </span>\r\n                  {errors.patientName && (\r\n                    <p className=\"error-message\">{errors.patientName.message}</p>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Date of Birth */}\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    Date of Birth{\" \"}\r\n                    <span\r\n                      className={getRequiredClass(\r\n                        values.dobMonth && values.dobDay && values.dobYear,\r\n                        errors.dobMonth || errors.dobDay || errors.dobYear\r\n                      )}\r\n                    >\r\n                      (Required)\r\n                    </span>\r\n                  </label>\r\n                  <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\r\n                    <select {...register(\"dobMonth\", { required: \"Month is required.\" })}>\r\n                      <option value=\"\">Month</option>\r\n                      {[...Array(12)].map((_, i) => {\r\n                        const monthVal = i + 1;\r\n                        return (\r\n                          <option key={monthVal} value={String(monthVal)}>\r\n                            {String(monthVal).padStart(2, \"0\")}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    <select {...register(\"dobDay\", { required: \"Day is required.\" })}>\r\n                      <option value=\"\">Day</option>\r\n                      {[...Array(31)].map((_, i) => {\r\n                        const dayVal = i + 1;\r\n                        return (\r\n                          <option key={dayVal} value={String(dayVal)}>\r\n                            {String(dayVal).padStart(2, \"0\")}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    <select {...register(\"dobYear\", { required: \"Year is required.\" })}>\r\n                      <option value=\"\">Year</option>\r\n                      {[...Array(100)].map((_, i) => {\r\n                        const yearVal = new Date().getFullYear() - i;\r\n                        return (\r\n                          <option key={yearVal} value={String(yearVal)}>\r\n                            {yearVal}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Date (auto-filled) */}\r\n    {/* Signature */}\r\n    <div className=\"form-group\">\r\n      <label>\r\n        Patient Signature{\" \"}\r\n        <span className={getRequiredClass(values.signature, errors.signature)}>\r\n          (Required)\r\n        </span>\r\n      </label>\r\n\r\n      {/* Signature Pad with hint label */}\r\n      <div className=\"signature-pad-wrapper\">\r\n        <div\r\n          className={`signature-hint ${values.signature ? \"hidden\" : \"\"}`}\r\n        >\r\n          ✍️ Sign Here\r\n        </div>\r\n\r\n    <div className=\"signature-frame\">\r\n    <SignatureCanvas\r\n      ref={(ref) => {\r\n        sigPad.current = ref;\r\n\r\n        if (ref && ref.getCanvas()) {\r\n          const canvas = ref.getCanvas();\r\n          Object.assign(canvas.style, {\r\n            border: \"none\", // border moved to wrapper\r\n            borderRadius: \"12px\",\r\n            backgroundColor: \"#ffffff\",\r\n            backgroundImage:\r\n              \"repeating-linear-gradient(45deg, #f3f4f6, #f3f4f6 10px, #ffffff 10px, #ffffff 20px)\",\r\n            width: \"min-content\",\r\n            maxWidth: \"100%\",\r\n            height: \"150px\",\r\n            display: \"block\",\r\n            transition: \"box-shadow 0.3s ease, transform 0.2s ease\",\r\n          });\r\n\r\n          const activateHover = () => {\r\n            canvas.style.boxShadow = \"0 8px 24px rgba(37, 99, 235, 0.35)\";\r\n            canvas.style.transform = \"scale(1.01)\";\r\n          };\r\n\r\n          const deactivateHover = () => {\r\n            canvas.style.boxShadow = \"0 6px 20px rgba(37, 99, 235, 0.2)\";\r\n            canvas.style.transform = \"scale(1)\";\r\n          };\r\n\r\n          // Desktop hover\r\n          canvas.addEventListener(\"mouseenter\", activateHover);\r\n          canvas.addEventListener(\"mouseleave\", deactivateHover);\r\n\r\n          // Mobile touch simulation\r\n          canvas.addEventListener(\"touchstart\", activateHover);\r\n          canvas.addEventListener(\"touchend\", deactivateHover);\r\n        }\r\n      }}\r\n      penColor=\"black\"\r\n      canvasProps={{\r\n        width: 400,\r\n        height: 150,\r\n      }}\r\n    onEnd={() => {\r\n      if (\r\n        sigPad.current &&\r\n        typeof sigPad.current.getTrimmedCanvas === \"function\" &&\r\n        !sigPad.current.isEmpty()\r\n      ) {\r\n        const dataUrl = sigPad.current.getTrimmedCanvas().toDataURL();\r\n        setValue(\"signature\", dataUrl);\r\n        trigger(\"signature\");\r\n      }\r\n    }}\r\n\r\n    />\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", gap: \"0.5rem\", marginTop: \"0.5rem\" }}>\r\n        <button\r\n          type=\"button\"\r\n          onClick={clearSignature}\r\n          className=\"clear-signature\"\r\n        >\r\n          ↻ Clear Signature\r\n        </button>\r\n      </div>\r\n\r\n      {errors.signature && (\r\n        <p className=\"error-message\">Signature is required.</p>\r\n      )}\r\n    </div>\r\n\r\n\r\n                {/* Navigation Buttons */}\r\n                <div className=\"form-navigation button-row\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn-outline\"\r\n                    onClick={() => {\r\n                      console.log(\"Step 3: Navigating back to step2\");\r\n                      navigate(\"/book-appointment-step2\");\r\n                    }}\r\n                  >\r\n                    Previous\r\n                  </button>\r\n                  <button type=\"submit\" className=\"submit-btn\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BookAppointmentStep3;\r\n"],"names":["BookAppointmentStep3","navigate","useNavigate","demoMode","sigPad","useRef","defaultDOB","month","day","year","register","handleSubmit","setValue","watch","trigger","formState","errors","useForm","mode","defaultValues","patientName","dobMonth","dobDay","dobYear","date","signature","values","useEffect","window","scrollTo","console","log","getRequiredClass","fieldValue","fieldError","_jsxs","_Fragment","children","Helmet","_jsx","name","content","className","style","width","marginBottom","onSubmit","step3Data","current","isEmpty","shouldValidate","signatureImage","getTrimmedCanvas","toDataURL","labeledStep3Data","patientConsentForMedicalServicesPatientName","patientConsentForMedicalServicesDobMonth","patientConsentForMedicalServicesDobDay","patientConsentForMedicalServicesDobYear","patientConsentForMedicalServicesDate","patientConsentForMedicalServicesSignature","step1And2Data","JSON","parse","localStorage","getItem","fullData","_objectSpread","setItem","stringify","type","maxLength","required","length","message","display","gap","value","Array","map","_","i","monthVal","String","padStart","dayVal","yearVal","Date","getFullYear","concat","SignatureCanvas","ref","getCanvas","canvas","Object","assign","border","borderRadius","backgroundColor","backgroundImage","maxWidth","height","transition","activateHover","boxShadow","transform","deactivateHover","addEventListener","penColor","canvasProps","onEnd","dataUrl","marginTop","onClick","clearSignature","clear"],"sourceRoot":""}