{"version":3,"file":"static/js/305.31d6272e.chunk.js","mappings":"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","sources":["pages/BookAppointmentStep6.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./BookAppointmentPage.css\";\r\n\r\nconst BookAppointmentStep6 = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [flashMessage, setFlashMessage] = useState(\"\");\r\n\r\n  const demoMode = false;\r\n  const patientSigPad = useRef(null);\r\n  const defaultDOB = \"\";\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      patientName: \"\",\r\n      patientSignature: \"\",\r\n      dob: defaultDOB,\r\n    },\r\n  });\r\n\r\n  const values = watch();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (demoMode) {\r\n      setValue(\"patientName\", \"John Doe\");\r\n      setValue(\"dob\", \"1980-01-01\");\r\n    }\r\n  }, [demoMode, setValue]);\r\n\r\n  useEffect(() => {\r\n    trigger();\r\n  }, [trigger]);\r\n\r\n  useEffect(() => {\r\n    const storedData = localStorage.getItem(\"appointmentFormData\");\r\n    if (storedData) {\r\n      console.log(\"Loaded stored form data:\", JSON.parse(storedData));\r\n    }\r\n  }, []);\r\n\r\n  const clearPatientSignature = () => {\r\n    if (patientSigPad.current) {\r\n      patientSigPad.current.clear();\r\n      setValue(\"patientSignature\", \"\");\r\n      trigger(\"patientSignature\");\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (step6Data) => {\r\n    if (!patientSigPad.current || patientSigPad.current.isEmpty()) {\r\n      setValue(\"patientSignature\", \"\", { shouldValidate: true });\r\n      trigger(\"patientSignature\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    const signatureData = patientSigPad.current.getTrimmedCanvas().toDataURL();\r\n    step6Data.patientSignature = signatureData;\r\n\r\n    const labeledStep6Data = {\r\n      controlledSubstanceAutoRefillConsentPatientName: step6Data.patientName,\r\n      controlledSubstanceAutoRefillConsentPatientSignature: step6Data.patientSignature,\r\n      controlledSubstanceAutoRefillConsentDob: step6Data.dob,\r\n    };\r\n\r\n    const previousSteps = JSON.parse(localStorage.getItem(\"appointmentFormData\")) || {};\r\n    const fullData = { ...previousSteps, ...labeledStep6Data };\r\n\r\n    try {\r\n      const response = await fetch(\"/appointment\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ appointment: fullData }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(\"✅ Submitted:\", result);\r\n        localStorage.removeItem(\"appointmentFormData\");\r\n        setFlashMessage(\"✅ Appointment submitted successfully!\");\r\n        setTimeout(() => {\r\n          navigate(\"/\");\r\n        }, 2000);\r\n      } else {\r\n        console.error(\"❌ Server error:\", result);\r\n        setFlashMessage(\"❌ Error submitting appointment. Please try again.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"❌ Network error:\", err);\r\n      setFlashMessage(\"❌ Network error. Please try again.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {flashMessage && (\r\n        <div className=\"flash-message\">\r\n          {flashMessage}\r\n        </div>\r\n      )}\r\n\r\n      {isLoading && (\r\n        <div className=\"loading-spinner\">\r\n          Submitting<span className=\"dots\"></span>\r\n        </div>\r\n      )}\r\n\r\n      <form className=\"intake-form\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"book-appointment-container\">\r\n          <div className=\"banner\">\r\n            <div className=\"banner-overlay\"></div>\r\n            <div className=\"banner-text\">\r\n              <h1>Book Telemedicine Consultation</h1>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"content-section\">\r\n            <h2>Start Your Wellness Journey Today</h2>\r\n            <div className=\"paper-container\">\r\n              <div className=\"progress\">\r\n                <div className=\"progress-info\">\r\n                  <p>Step 6 of 6</p>\r\n                </div>\r\n                <div className=\"progress-bar-background\">\r\n                  <div className=\"progress-bar-fill\" style={{ width: \"100%\" }} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"consent-text\">\r\n                <p>\r\n                  I understand that Pure Health &amp; Wellness has enrolled my controlled\r\n                  substance medication in Tailor Made Compounding’s auto-refill program.\r\n                </p>\r\n                <p><strong>Liability and Responsibility:</strong></p>\r\n                <p>I understand that TMC will not notify me or the clinic of refills...</p>\r\n                {/* Truncated for brevity */}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Patient's Name (Required)</label>\r\n                <input\r\n                  type=\"text\"\r\n                  maxLength=\"50\"\r\n                  {...register(\"patientName\", { required: \"Patient's Name is required\" })}\r\n                />\r\n                <span className=\"character-counter\">\r\n                  {values.patientName?.length || 0} of 50 max characters\r\n                </span>\r\n                {errors.patientName && <p className=\"error-message\">{errors.patientName.message}</p>}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Patient Signature (Required)</label>\r\n                <div className=\"signature-pad-wrapper\">\r\n                  <SignatureCanvas\r\n                    ref={patientSigPad}\r\n                    penColor=\"black\"\r\n                    canvasProps={{\r\n                      width: 400,\r\n                      height: 150,\r\n                      className: \"signature-canvas-fixed\",\r\n                    }}\r\n                    onEnd={() => {\r\n                      if (!patientSigPad.current.isEmpty()) {\r\n                        const dataUrl = patientSigPad.current.getTrimmedCanvas().toDataURL();\r\n                        setValue(\"patientSignature\", dataUrl);\r\n                        trigger(\"patientSignature\");\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n                <button type=\"button\" onClick={clearPatientSignature} className=\"clear-signature\">\r\n                  Clear Signature\r\n                </button>\r\n                {errors.patientSignature && (\r\n                  <p className=\"error-message\">{errors.patientSignature.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Date of Birth (Required)</label>\r\n                <input\r\n                  type=\"date\"\r\n                  {...register(\"dob\", { required: \"Date of Birth is required\" })}\r\n                />\r\n                {errors.dob && <p className=\"error-message\">{errors.dob.message}</p>}\r\n              </div>\r\n\r\n              <div className=\"form-navigation button-row\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-outline\"\r\n                  onClick={() => navigate(\"/book-appointment-step5\")}\r\n                >\r\n                  Previous\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-btn\">\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BookAppointmentStep6;\r\n"],"names":["BookAppointmentStep6","_values$patientName","navigate","useNavigate","isLoading","setIsLoading","useState","flashMessage","setFlashMessage","demoMode","patientSigPad","useRef","register","handleSubmit","setValue","watch","trigger","formState","errors","useForm","mode","defaultValues","patientName","patientSignature","dob","values","useEffect","window","scrollTo","storedData","localStorage","getItem","console","log","JSON","parse","_jsxs","_Fragment","children","_jsx","className","onSubmit","async","current","isEmpty","shouldValidate","signatureData","getTrimmedCanvas","toDataURL","step6Data","labeledStep6Data","controlledSubstanceAutoRefillConsentPatientName","controlledSubstanceAutoRefillConsentPatientSignature","controlledSubstanceAutoRefillConsentDob","fullData","response","fetch","method","headers","body","stringify","appointment","result","json","ok","removeItem","setTimeout","error","err","style","width","type","maxLength","required","length","message","SignatureCanvas","ref","penColor","canvasProps","height","onEnd","dataUrl","onClick","clearPatientSignature","clear"],"sourceRoot":""}